//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrainingManagementSystemDal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SwatiTmsEntities : DbContext
    {
        public SwatiTmsEntities()
            : base("name=SwatiTmsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<Batch> usp_Batch_getBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Batch>("usp_Batch_getBatch");
        }
    
        public virtual ObjectResult<Batch> usp_Batch_getBatch(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Batch>("usp_Batch_getBatch", mergeOption);
        }
    
        public virtual int usp_Batch_InsertBatch(string batchCode, Nullable<int> batchCapacity, Nullable<int> courseId, Nullable<System.DateTime> startDate, string createdBy)
        {
            var batchCodeParameter = batchCode != null ?
                new ObjectParameter("BatchCode", batchCode) :
                new ObjectParameter("BatchCode", typeof(string));
    
            var batchCapacityParameter = batchCapacity.HasValue ?
                new ObjectParameter("BatchCapacity", batchCapacity) :
                new ObjectParameter("BatchCapacity", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Batch_InsertBatch", batchCodeParameter, batchCapacityParameter, courseIdParameter, startDateParameter, createdByParameter);
        }
    
        public virtual int usp_Batch_UpdateBatch(string batchCode, Nullable<int> batchCapacity, Nullable<System.DateTime> startDate, string modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var batchCodeParameter = batchCode != null ?
                new ObjectParameter("BatchCode", batchCode) :
                new ObjectParameter("BatchCode", typeof(string));
    
            var batchCapacityParameter = batchCapacity.HasValue ?
                new ObjectParameter("BatchCapacity", batchCapacity) :
                new ObjectParameter("BatchCapacity", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Batch_UpdateBatch", batchCodeParameter, batchCapacityParameter, startDateParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_Course_Delete(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Course_Delete", courseIdParameter);
        }
    
        public virtual ObjectResult<usp_Course_DisplayById_Result> usp_Course_DisplayById(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Course_DisplayById_Result>("usp_Course_DisplayById", courseIdParameter);
        }
    
        public virtual ObjectResult<Course> usp_Course_getCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("usp_Course_getCourse");
        }
    
        public virtual ObjectResult<Course> usp_Course_getCourse(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("usp_Course_getCourse", mergeOption);
        }
    
        public virtual int usp_Course_InsertCourse(string courseCode, string courseName, string createdBy, Nullable<int> courseDuration)
        {
            var courseCodeParameter = courseCode != null ?
                new ObjectParameter("CourseCode", courseCode) :
                new ObjectParameter("CourseCode", typeof(string));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var courseDurationParameter = courseDuration.HasValue ?
                new ObjectParameter("CourseDuration", courseDuration) :
                new ObjectParameter("CourseDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Course_InsertCourse", courseCodeParameter, courseNameParameter, createdByParameter, courseDurationParameter);
        }
    
        public virtual int usp_Course_UpdateCourseRecord(Nullable<int> courseId, string courseName, Nullable<bool> courseStatus, Nullable<int> courseDuration, string modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var courseStatusParameter = courseStatus.HasValue ?
                new ObjectParameter("CourseStatus", courseStatus) :
                new ObjectParameter("CourseStatus", typeof(bool));
    
            var courseDurationParameter = courseDuration.HasValue ?
                new ObjectParameter("CourseDuration", courseDuration) :
                new ObjectParameter("CourseDuration", typeof(int));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Course_UpdateCourseRecord", courseIdParameter, courseNameParameter, courseStatusParameter, courseDurationParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_Batch_DeleteBatch(Nullable<int> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Batch_DeleteBatch", batchIdParameter);
        }
    
        public virtual ObjectResult<User> usp_Users_getUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_Users_getUser");
        }
    
        public virtual ObjectResult<User> usp_Users_getUser(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_Users_getUser", mergeOption);
        }
    
        public virtual int usp_User_InsertUser(string userCode, string userName, string userEmail, string userPassword, string role, Nullable<System.DateTime> joinDate, Nullable<int> userManager, string createdBy)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var joinDateParameter = joinDate.HasValue ?
                new ObjectParameter("joinDate", joinDate) :
                new ObjectParameter("joinDate", typeof(System.DateTime));
    
            var userManagerParameter = userManager.HasValue ?
                new ObjectParameter("UserManager", userManager) :
                new ObjectParameter("UserManager", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_InsertUser", userCodeParameter, userNameParameter, userEmailParameter, userPasswordParameter, roleParameter, joinDateParameter, userManagerParameter, createdByParameter);
        }
    
        public virtual int usp_User_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_DeleteUser", userIdParameter);
        }
    
        public virtual int usp_User_UpdateUser(Nullable<int> userId, string userName, string userEmail, string userPassword, string role, Nullable<System.DateTime> joinDate, Nullable<int> userManager, string modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var joinDateParameter = joinDate.HasValue ?
                new ObjectParameter("JoinDate", joinDate) :
                new ObjectParameter("JoinDate", typeof(System.DateTime));
    
            var userManagerParameter = userManager.HasValue ?
                new ObjectParameter("UserManager", userManager) :
                new ObjectParameter("UserManager", typeof(int));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_UpdateUser", userIdParameter, userNameParameter, userEmailParameter, userPasswordParameter, roleParameter, joinDateParameter, userManagerParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_login(string userEmail, string userPassword, ObjectParameter found, ObjectParameter role, ObjectParameter userName)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_login", userEmailParameter, userPasswordParameter, found, role, userName);
        }
    }
}
